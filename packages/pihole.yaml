################################################################
## Packages / Pi-Hole
## @norien - https://github.com/Norien/Home-Assistant-Config
## German Translation by @cvoid_twitter
## #!secret_example
#pi_hole_url: http://192.168.0.55/admin/api.php
#Authorization & Token required (see WEBPASSWORD in /etc/pihole/setupVars.conf)
#pi_hole_switch_on: /usr/bin/curl -k "localhost/admin/api.php?enable&auth=webkey"
#pi_hole_switch_off: /usr/bin/curl -k "localhost/admin/api.php?disable=600&auth=webkey"
# the .SH file I am using is here
#https://github.com/Norien/Home-Assistant-Config/blob/master/shell/pihole.sh
################################################################
homeassistant:
  customize:
    switch.pihole:
      friendly_name: Pi-Hole
      entity_picture: /local/pihole.png

    sensor.ads_percentage_today:
      friendly_name: Geblockte Werbung (in Prozent)
      unit_of_measurement: '%'
      icon: mdi:ticket-percent

    sensor.domains_being_blocked:
      friendly_name: Anzahl geblockte Domains
      icon: mdi:do-not-disturb

    sensor.ads_blocked_today:
      friendly_name: Werbung heute blockiert
      icon: mdi:do-not-disturb

    sensor.dns_queries_today:
      friendly_name: DNS Anfragen heute
      icon: mdi:note-text

    sensor.unique_domains:
      friendly_name: Unique Domains
      icon: mdi:approval

    sensor.queries_forwarded:
      friendly_name: Weitergeleitete Anfragen
      icon: mdi:arrange-send-backward

    sensor.queries_cached:
      friendly_name: Gecachte Anfragen
      icon: mdi:animation

    script.ad_blocker:
      friendly_name: Ad Blocker
      emulated_hue: true

    script.pihole_off:
      friendly_name: Pi-Hole ausschalten
      icon: mdi:do-not-disturb

    script.pihole_on:
      friendly_name: Pi-Hole anschalten
      icon: mdi:power

    sensor.pihole_dns:
      friendly_name: Status DNS Service

    sensor.pihole_blocking:
      friendly_name: Status Adblock

group:
  PiHole:
    entities:
      - switch.pihole
      - sensor.ads_blocked_today
      - sensor.ads_percentage_today
      - sensor.dns_queries_today
      - sensor.domains_being_blocked
      - sensor.ads_blocked_today
      - sensor.unique_domains
      - sensor.queries_forwarded
      - sensor.queries_cached
      - sensor.pihole_dns
      - sensor.pihole_blocking

###############################################################################
#  Sensors
###############################################################################
sensor:
  - platform: rest
    name: dns_queries_today
    resource: !secret pi_hole_url
    value_template: '{{ value_json.dns_queries_today }}'

  - platform: rest
    name: domains_being_blocked
    resource: !secret pi_hole_url
    value_template: '{{ value_json.domains_being_blocked }}'

  - platform: rest
    name: ads_blocked_today
    resource: !secret pi_hole_url
    value_template: '{{ value_json.ads_blocked_today }}'

  - platform: rest
    name: ads_percentage_today
    resource: !secret pi_hole_url
    value_template: '{{ value_json.ads_percentage_today }}'

  - platform: rest
    name: unique_domains
    resource: !secret pi_hole_url
    value_template: '{{ value_json.unique_domains }}'

  - platform: rest
    name: queries_forwarded
    resource: !secret pi_hole_url
    value_template: '{{ value_json.queries_forwarded }}'

  - platform: rest
    name: queries_cached
    resource: !secret pi_hole_url
    value_template: '{{ value_json.queries_cached }}'

###### I had to provide access in sudoers file for this script to run.
  - platform: command_line
    command: 'bash /home/homeassistant/script/pihole.sh'
    name: 'pihole_status_raw'
    scan_interval: 60

  - platform: template
    sensors:
      pihole_dns:
        value_template: "{{states.sensor.pihole_status_raw.state.split(':::')[1]}}"
        icon_template: >-
          {% if states.sensor.pihole_dns.state == 'DNS service is running' %}
            mdi:checkbox-marked
          {% else %}
            mdi:checkbox-blank-outline
          {% endif %}

  - platform: template
    sensors:
      pihole_blocking:
        value_template: "{{states.sensor.pihole_status_raw.state.split(':::')[2]}}"
        icon_template: >-
          {% if states.sensor.pihole_status.state == 'True' %}
            mdi:checkbox-blank-outline
          {% else %}
            mdi:checkbox-marked
          {% endif %}

  - platform: template
    sensors:
      pihole_status:
        value_template: >-
          {% if states.sensor.pihole_blocking.state == 'Pi-hole blocking is Enabled' %}
            True
          {% else %}
            False
          {% endif %}
###############################################################################
#  Switch
###############################################################################
switch:
  - platform: template
    switches:
      pihole:
        value_template: '{{ states.sensor.pihole_status.state }}'
        turn_on:
          service: script.turn_on
          entity_id: script.pihole_on
        turn_off:
          service: script.turn_on
          entity_id: script.pihole_off
###############################################################################
#  Scripts
###############################################################################
script:
  # this script is just for alexa to toggle on/off
  ad_blocker:
    sequence:
      - service: switch.toggle
        entity_id: switch.pihole
  pihole_on:
    sequence:
       - service: shell_command.pihole_on
  pihole_off:
    sequence:
       - service: shell_command.pihole_off
###############################################################################
#  Shell Command
###############################################################################
shell_command:
  pihole_on: !secret pi_hole_switch_on
  pihole_off: !secret pi_hole_switch_off
