########################################################################
## Packages / Light Transition Alarm                                  ##
## @bl0rp - https://github.com/bl0rp/Home-Assistant-Config            ##
########################################################################
homeassistant:


#############
### Sensor ##
#############
sensor:
  - platform: template
    sensors:
        next_alarm:
          value_template: "{{ states('sensor.p4xl_nachster_wecker')  }}"
          attribute_templates:
            alarm_time: >-
              {{ as_timestamp(states('sensor.next_alarm')) | timestamp_custom('%H:%M') }}
            minutes_left: >-
              {% set dummy = states("sensor.time") %}
              {{((states('sensor.next_alarm')|as_timestamp|int - now()|as_timestamp|int)/60)|int}}
            text_time_left: >-
              {% set time = state_attr('sensor.next_alarm','minutes_left') %}
              {% set hours = ((time | int /  60) | string).split('.')[0] %}
              {% set minutes = time | int % 60 %}
              {{hours}} Stunden {{minutes}} Minuten
            next_alarm_localtime: >-
              {% set day = ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"] %}
              {{ as_timestamp(states('sensor.next_alarm')) | timestamp_custom(day[now().weekday()] ~ ' %d.%m. %H:%M') }}

#################
### automation ##
#################
automation:
  - alias: alarm_lights_alarm_phone
    id: alarm_lights_alarm_phone
    initial_state: True
    trigger:
      - platform: numeric_state
        entity_id: sensor.next_alarm
        attribute: minutes_left
        below: 1
    condition:
      - condition: state
        entity_id: input_boolean.chrisbluetooth
        state: "on"
    action:
      - service: light.turn_on
        data:
          brightness_pct: 100
          kelvin: 6500
        target:
          entity_id: light.schlafzimmer
      - service: light.turn_on
        data:
          color_name: red
          effect: Fast Pulse
        target:
          entity_id: light.esp32_12_led
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_id_christoph
          message: "Lichter aus?"
          keyboard: ["/Alarme_Aus"]
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_id_christoph
          message: >
             {{ now().strftime('%d.%m.%Y %H:%M:%S') }}
             Obacht: {{ trigger.to_state.attributes.friendly_name }} wurde aktiviert!
      - service: notify.alexa_media
        data_template:
          data:
            type: tts
          target: media_player.christophs_echo_dot
          message: >
             {% if now().strftime("%H")|int < 12 %}
             Guten Morgen.
             {% elif now().strftime("%H")|int < 18 %}
             Guten Nachmittag.
             {% else %}
             Guten Abend.
             {% endif %}
             Der Wecker klingelt!
  - alias: telegram_replay_alarme_aus
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/Alarme_Aus'
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_id_christoph
          message: "Jawohl"
          keyboard: ["/menu"]
      - service: light.turn_off
        entity_id: light.esp32_12_led
      - service: light.turn_off
        entity_id: light.schlafzimmer
#############
### script ##
#############
script:

# light Transition script
  sunrise_wake_up_esp32_12_led:
    alias: Sunrise wake-up esp32
    sequence:
    - variables:
        start_temp: 500
        end_temp: 180
        duration_mins: 60
    - service: light.turn_on
      data:
        color_temp: '{{ start_temp }}'
        brightness: 1
      entity_id: light.esp32_12_led
    - delay: '1'
    - repeat:
        count: '{{ duration_mins }}'
        sequence:
        - service: light.turn_on
          data:
            brightness: '{{ (repeat.index / duration_mins * 255) | int }}'
            color_temp: '{{ (start_temp + repeat.index / duration_mins * (end_temp - start_temp)) | int }}'
          entity_id: light.esp32_12_led
        - delay: '1'
    mode: single
  sunrise_wake_up_esp32_12_led_pct:
    alias: Sunrise wake-up esp32 pct
    sequence:
    - variables:
        start_temp: 500
        end_temp: 180
        duration_mins: 60
    - service: light.turn_on
      data:
        color_temp: '{{ start_temp }}'
        brightness_pct: 1
      entity_id: light.esp32_12_led
    - delay: '1'
    - repeat:
        count: '{{ duration_mins }}'
        sequence:
        - service: light.turn_on
          data:
            brightness_pct: '{{ (repeat.index / duration_mins * 100) | int }}'
            color_temp: '{{ (start_temp + repeat.index / duration_mins * (end_temp - start_temp)) | int }}'
          entity_id: light.esp32_12_led
        - delay: '60'
    mode: single
  sunrise_wake_up_schlafzimmer:
    alias: Sunrise wake-up schlafzimmer
    sequence:
    - variables:
        start_temp: 500
        end_temp: 180
        duration_mins: 15
    - service: light.turn_on
      data:
        color_temp: '{{ start_temp }}'
        brightness: 1
      entity_id: light.schlafzimmer
    - delay: '1'
    - repeat:
        count: '{{ duration_mins }}'
        sequence:
        - service: light.turn_on
          data:
            brightness: '{{ (repeat.index / duration_mins * 255) | int }}'
            color_temp: '{{ (start_temp + repeat.index / duration_mins * (end_temp - start_temp)) | int }}'
          entity_id: light.schlafzimmer
        - delay: '60'
    mode: single
