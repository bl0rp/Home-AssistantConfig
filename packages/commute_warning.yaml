##############################################################
### Packages / Travel Time Warning                         ###
### @cvoid - https://github.com/bl0rp/Home-AssistantConfig ###
### Thanks to skalavala                                    ###
##############################################################

homeassistant:



# slider for defined time to be before the event happens
input_number:
  eintreffzeit_nef:
    name: Slider
    initial: 45
    min: 0
    max: 60
    step: 1
  eintreffzeit_rtw:
    name: Slider
    initial: 30
    min: 0
    max: 60
    step: 1
  eintreffzeit_generell:
    name: Slider
    initial: 5
    min: 0
    max: 60
    step: 1

###############
### Sensor ####
###############

sensor:

#Traveltime to next calender event
  - platform: waze_travel_time
    name: waze_zuhause_calender_drk
    origin: zone.home
    destination: sensor.next_calendar_work_location
    region: 'EU'

  - platform: waze_travel_time
    name: waze_zuhause_calender_main
    origin: zone.home
    destination: sensor.next_calendar_main_location
    region: 'EU'

  - platform: template
    sensors:
      next_calendar_work_location:
        entity_id: sensor.time
        value_template: "{{state_attr('calendar.drk_stgt', 'location')}}"
      next_calendar_main_location:
        entity_id: sensor.time
        value_template: "{{state_attr('calendar.cvoid12_googlemail_com', 'location')}}"

#Next event in xx min
      next_calendar_work_start_time_in_60min:
        entity_id: sensor.time
        value_template: "{% if (as_timestamp(states.calendar.drk_stgt.attributes.start_time) - as_timestamp(states.sensor.date_time.last_updated)) < 60 %}true{% else %}false{% endif %}"
        friendly_name: "Nächstes Event in 60 Minuten"
      next_calendar_work_start_time_in_75min:
        entity_id: sensor.time
        value_template: "{% if (as_timestamp(states.calendar.drk_stgt.attributes.start_time) - as_timestamp(states.sensor.date_time.last_updated)) < 75 %}true{% else %}false{% endif %}"
        friendly_name: "Nächstes Event in 75 Minuten"


#any location without traffic
      next_calendar_event_work_with_input_select_time_nef:
        entity_id: sensor.time
        value_template: "{% if (as_timestamp(states.calendar.drk_stgt.attributes.start_time) - as_timestamp(states.sensor.date_time.last_updated)) < ( states('input_number.eintreffzeit_nef') |int * 60) %}true{% else %}false{% endif %}"
        friendly_name: "NEF Slider"
      next_calendar_event_work_with_input_select_time_rtw:
        entity_id: sensor.time
        value_template: "{% if (as_timestamp(states.calendar.drk_stgt.attributes.start_time) - as_timestamp(states.sensor.date_time.last_updated)) < ( states('input_number.eintreffzeit_rtw') |int * 60 )  %}true{% else %}false{% endif %}"
        friendly_name: "RTW Slider"
      next_calendar_event_work_with_input_select_time_generell:
        entity_id: sensor.time
        value_template: "{% if (as_timestamp(states.calendar.drk_stgt.attributes.start_time) - as_timestamp(states.sensor.date_time.last_updated)) < ( states('input_number.eintreffzeit_generell') |int * 60 )  %}true{% else %}false{% endif %}"
        friendly_name: "Generell Slider"


#destination rw2
      next_calendar_event_work_with_input_select_time_nef_and_traffic_rw2:
        entity_id: sensor.time
        value_template: "{% if (as_timestamp(states.calendar.drk_stgt.attributes.start_time) - as_timestamp(states.sensor.date_time.last_updated)) < ( (states('input_number.eintreffzeit_nef') |int * 60) + (states('sensor.waze_zuhause_rw2')|int *60)) %}true{% else %}false{% endif %}"
        friendly_name: "NEF Slider and Traffic RW2"

      next_calendar_event_work_with_input_select_time_rtw_rw2:
        entity_id: sensor.time
        value_template: "{% if (as_timestamp(states.calendar.drk_stgt.attributes.start_time) - as_timestamp(states.sensor.date_time.last_updated)) < ( (states('input_number.eintreffzeit_rtw') |int * 60) + (states('sensor.waze_zuhause_rw2')|int *60)) %}true{% else %}false{% endif %}"
        friendly_name: "RTW Slider and Traffic RW2"

#destination hrw
      next_calendar_event_work_with_input_select_time_nef_and_traffic_hrw:
        entity_id: sensor.time
        value_template: "{% if (as_timestamp(states.calendar.drk_stgt.attributes.start_time) - as_timestamp(states.sensor.date_time.last_updated)) < ( (states('input_number.eintreffzeit_nef') |int * 60) + (states('sensor.waze_zuhause_hrw')|int *60)) %}true{% else %}false{% endif %}"
        friendly_name: "NEF Slider and Traffic HRW"

      next_calendar_event_work_with_input_select_time_rtw_hrw:
        entity_id: sensor.time
        value_template: "{% if (as_timestamp(states.calendar.drk_stgt.attributes.start_time) - as_timestamp(states.sensor.date_time.last_updated)) < ( (states('input_number.eintreffzeit_rtw') |int * 60) + (states('sensor.waze_zuhause_hrw')|int *60)) %}true{% else %}false{% endif %}"
        friendly_name: "RTW Slider and Traffic HRW"




##############
### Notify ###
##############

automation:


  - alias: notify_calendar_event_time_to_leave_without_traffic
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id:
          - sensor.next_calendar_event_work_with_input_select_time_nef
          - sensor.next_calendar_event_work_with_input_select_time_rtw
          - sensor.next_calendar_event_work_with_input_select_time_generell
        to: 'true'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{% if trigger.from_state and trigger.to_state %} True {% else %} False {% endif %}"
    action:
    - service: notify.telegram_christoph
      data_template:
        message: >
          {{ now().strftime('%d.%m.%Y %H:%M:%S') }}:
          TIME TO LEAVE!  trigger: {{ trigger.to_state.attributes.friendly_name }}
          calendar message: {{state_attr('calendar.drk_stgt', 'message')}}


  - alias: notify_next_calendar_event
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id:
          - sensor.next_calendar_work_start_time_in_60min
          - sensor.next_calendar_work_start_time_in_75min
        to: 'true'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{% if trigger.from_state and trigger.to_state %} True {% else %} False {% endif %}"
    action:
    - service: notify.telegram_christoph
      data_template:
        message: >
          {{ now().strftime('%d.%m.%Y %H:%M:%S') }}:
          Next calendar event!  trigger: {{ trigger.to_state.attributes.friendly_name }}
          calendar message: {{state_attr('calendar.drk_stgt', 'message')}}
