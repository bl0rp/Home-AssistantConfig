##############################################################
### Packages / sonoff2                                     ###
### @cvoid - https://github.com/bl0rp/Home-AssistantConfig ###
### Thanks to cnrd                                         ###
### https://github.com/cnrd                                ###
### Inspired by mihalski                                   ###
### https://github.com/mihalski/homeassistant-config       ###
##############################################################

homeassistant:

  customize:
    switch.sonoff2:
      friendly_name: Workstation
      icon: mdi:desktop-classic
    sensor.sonoff2_momentane_leistung:
      friendly_name: Aktuelle Leistung
      icon: mdi:power-plug
    sensor.sonoff2_spannung:
      friendly_name: Spannung
      icon: mdi:flash
    sensor.sonoff2_stromstaerke:
      friendly_name: Stromstärke
      icon: mdi:flash
    sensor.sonoff2_ipv4:
      friendly_name: IPv4 Sonoff 2
      icon: mdi:server-network
    sensor.sonoff2_max_load:
      friendly_name: Maximale Leistung
      icon: mdi:fire
    sensor.sonoff2_kosten_heute:
      friendly_name: Kosten Heute
      icon: mdi:currency-eur
    sensor.sonoff2_kosten_gestern:
      friendly_name: Kosten Gestern
      icon: mdi:currency-eur
    sensor.sonoff2_kosten_gesamt:
      friendly_name: Gesamtkosten
      icon: mdi:currency-eur
    sensor.sonoff2_verbrauch_heute:
      friendly_name: Vebrauch Heute
      icon: mdi:chart-line
    sensor.sonoff2_verbrauch_gestern:
      friendly_name: Vebrauch Gestern
      icon: mdi:chart-line
    sensor.sonoff2_gesamtverbrauch:
      friendly_name: Gesamtverbrauch
      icon: mdi:chart-line
    sensor.sonoff2_uptime:
      friendly_name: Laufzeit
      icon: mdi:clock-fast
    script.del_sonoff2_power_log:
      friendly_name: Maximale Leistung zurücksetzen
      icon: mdi:eraser
    automation.sonoff2_load_lcd:
      friendly_name: Maximale Leistung auf dem LCD?
      icon: mdi:monitor




sensor:

### Reading the values from the tasmota mqtt string

  - platform: mqtt
    name: "sonoff2 Verbrauch Heute"
    state_topic: "tele/sonoff2/SENSOR"
    value_template: "{{ value_json.ENERGY.Today }}"
    unit_of_measurement: "kWh"
    availability_topic: "tele/sonoff2/LWT"
    payload_available: "Online"
    payload_not_available: "Offline"

  - platform: mqtt
    name: "sonoff2 Verbrauch Gestern"
    state_topic: "tele/sonoff2/SENSOR"
    value_template: "{{ value_json.ENERGY.Yesterday }}"
    unit_of_measurement: "kWh"
    availability_topic: "tele/sonoff2/LWT"
    payload_available: "Online"
    payload_not_available: "Offline"

  - platform: mqtt
    name: "sonoff2 Gesamtverbrauch"
    state_topic: "tele/sonoff2/SENSOR"
    value_template: "{{ value_json.ENERGY.Total }}"
    unit_of_measurement: "kWh"
    availability_topic: "tele/sonoff2/LWT"
    payload_available: "Online"
    payload_not_available: "Offline"

  - platform: mqtt
    name: "sonoff2 Momentane Leistung"
    state_topic: "tele/sonoff2/SENSOR"
    value_template: "{{ value_json.ENERGY.Power }}"
    unit_of_measurement: "W"
    availability_topic: "tele/sonoff2/LWT"
    payload_available: "Online"
    payload_not_available: "Offline"

  - platform: mqtt
    name: "sonoff2 Spannung"
    state_topic: "tele/sonoff2/SENSOR"
    value_template: "{{ value_json.ENERGY.Voltage }}"
    unit_of_measurement: "V"
    availability_topic: "tele/sonoff2/LWT"
    payload_available: "Online"
    payload_not_available: "Offline"

  - platform: mqtt
    name: "sonoff2 Stromstaerke"
    state_topic: "tele/sonoff2/SENSOR"
    value_template: "{{ value_json.ENERGY.Current }}"
    unit_of_measurement: "A"
    availability_topic: "tele/sonoff2/LWT"
    payload_available: "Online"
    payload_not_available: "Offline"

  - platform: mqtt
    name: "sonoff2 uptime"
    state_topic: "tele/sonoff2/STATE"
    value_template: "{{ value_json.Uptime }}"
    availability_topic: "tele/sonoff2/LWT"
    payload_available: "Online"
    payload_not_available: "Offline"

### Calculating cost based on the local prive per kWh

  - platform: template
    sensors:
      sonoff2_kosten_heute:
        friendly_name: Kosten Heute
        unit_of_measurement: "€"
        value_template: >-
          {{ states.sensor.sonoff2_verbrauch_heute.state  | multiply(0.2657) | round(2) }}

      sonoff2_kosten_gestern:
        friendly_name: Kosten Gestern
        unit_of_measurement: "€"
        value_template: >-
          {{ states.sensor.sonoff2_verbrauch_gestern.state  | multiply(0.2657) | round(2) }}

      sonoff2_kosten_gesamt:
        friendly_name: Gesamtkosten
        unit_of_measurement: "€"
        value_template: >-
          {{ states.sensor.sonoff2_gesamtverbrauch.state  | multiply(0.2657) | round(2) }}

### Usage sensor for other scripts/automations

      sonoff2_use:
        friendly_name: "Vebraucher aktiv?"
        value_template: "{% if states('sensor.sonoff2_momentane_leistung') | int > 20 %}Ja{% else %}Nein{% endif %}"
        icon_template: "{% if states('sensor.sonoff2_momentane_leistung') | int > 20 %}mdi:flash{% else %}mdi:flash-off{% endif %}"


### Reading the highest value in the power log file ( see automation)

  - platform: command_line
    name: 'sonoff2_max_load'
    command: "grep -E '[0-9]+' /home/homeassistant/log/sonoff2/power.txt| sort -rn | head -n 1"
    unit_of_measurement: "W"
    scan_interval: 15

### log power to the logfile

notify:
    - name: sonoff2_power_log
      platform: file
      filename: /home/homeassistant/log/sonoff2/power.txt

### main switch on/off


switch:
  - platform: mqtt
    name: "sonoff2"
    state_topic: "stat/sonoff2/POWER1"
    command_topic: "cmnd/sonoff2/POWER1"
    availability_topic: "tele/sonoff2/LWT"
    qos: 1
    payload_on: "ON"
    payload_off: "OFF"
    payload_available: "Online"
    payload_not_available: "Offline"
    retain: false




### send the current and maximum power to the LCD Display connected to a NodeMCU with espeasy

automation:
  - alias: Sonoff2 Load LCD
    initial_state: false
    trigger:
      platform: state
      entity_id:
        - sensor.sonoff2_momentane_leistung
        - sensor.sonoff2_sonoff2_max_load
    action:
      - service: shell_command.curl2
        data:
          url: http://192.168.0.84/control?cmd=lcdcmd,clear
          method: get
      - service: shell_command.curl2
        data:
          url: http://192.168.0.84/control?cmd=lcdcmd,on
          method: get
      - service: shell_command.curl2
        data:
          url: "http://192.168.0.84/control?cmd=lcd,1,1,Power%20Workstation:"
          method: get
      - service: shell_command.curl2
        data_template:
          url: "http://192.168.0.84/control?cmd=lcd,2,1,{{ states('sensor.sonoff2_momentane_leistung') }}%20Watt%20({{ now().strftime('%H:%M:%S') }})"
          method: get
      - service: shell_command.curl2
        data:
          url: "http://192.168.0.84/control?cmd=lcd,3,1,Maximum:"
          method: get
      - service: shell_command.curl2
        data_template:
          url: "http://192.168.0.84/control?cmd=lcd,4,1,{{ states('sensor.sonoff2_max_load') }}%20Watt"
          method: get

#Turn on/off the ESP / Automations (packages/sysinfo) while using the Computer

  - alias: Auto On LCD while using the PC
    initial_state: true
    trigger:
      platform: state
      entity_id:
        - sensor.sonoff2_use
      to: 'Ja'
      for:
        seconds: 30
    action:
      - service: switch.turn_on
        entity_id: switch.11001_a
      - service: automation.turn_on
        entity_id: automation.sonoff2_load_lcd
      - service: automation.turn_on
        entity_id: automation.nuc_load_to_led


  - alias: Auto Off LCD when not using the PC
    initial_state: true
    trigger:
      platform: state
      entity_id:
        - sensor.sonoff2_use
      to: 'Nein'
      for:
        seconds: 15
    action:
      - service: switch.turn_off
        entity_id: switch.esp04_led_red
      - service: switch.turn_off
        entity_id: switch.esp04_led_yellow
      - service: switch.turn_off
        entity_id: switch.esp04_led_green
      - delay: 00:00:02
      - service: switch.turn_off
        entity_id: switch.11001_a
      - service: automation.turn_off
        entity_id: automation.sonoff2_load_lcd
      - service: automation.turn_off
        entity_id: automation.nuc_load_to_led


### Record all power levels to a file (see notify)

  - alias: Sonoff2 Load logfile
    initial_state: True
    trigger:
      - platform: state
        entity_id: sensor.sonoff2_momentane_leistung
    action:
      - service: notify.sonoff2_power_log
        data_template:
          message: >
            {{ states.sensor.sonoff2_momentane_leistung.state }}

### Delete the logfile (reset the maximum power sensor)

script:
  del_sonoff2_power_log:
     sequence:
       - service: shell_command.del_sonoff2_power_log

shell_command:
  del_sonoff2_power_log: rm /home/homeassistant/log/sonoff2/power.txt && touch /home/homeassistant/log/sonoff2/power.txt && chown -R -v homeassistant:homeassistant /home/homeassistant/log/sonoff2/power.txt
