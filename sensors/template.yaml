  - platform: template
    sensors:

### systemmonitor
      process_sshd_format:
        friendly_name: 'SSH Daemon'
        value_template: "{{ 'running' if is_state('sensor.process_sshd', 'on') else 'stopped' }}"
        icon_template: '{% if is_state("sensor.process_sshd", "on") %}mdi:checkbox-marked-circle-outline{% else %}mdi:alert{% endif %}'
      process_autossh_format:
        friendly_name: 'autossh tunnel script'
        icon_template: '{% if is_state("sensor.process_autossh", "on") %}mdi:checkbox-marked-circle-outline{% else %}mdi:alert{% endif %}'
        value_template: "{{ 'running' if is_state('sensor.process_autossh', 'on') else 'stopped' }}"
      process_dhcpd_format:
        friendly_name: 'DHCPD Daemon'
        icon_template: '{% if is_state("sensor.process_dhcpd", "on") %}mdi:checkbox-marked-circle-outline{% else %}mdi:alert{% endif %}'
        value_template: "{{ 'running' if is_state('sensor.process_dhcpd', 'on') else 'stopped' }}"
      process_mosquitto_format:
        friendly_name: 'MQTT Daemon'
        icon_template: '{% if is_state("sensor.process_mosquitto", "on") %}mdi:checkbox-marked-circle-outline{% else %}mdi:alert{% endif %}'
        value_template: "{{ 'running' if is_state('sensor.process_mosquitto', 'on') else 'stopped' }}"

#### Last Motion
#
#      template_pir_motion:
#        friendly_name: 'Motion Location'
#        value_template: >
#                    {%- set pirs = [states.sensor.multisensor1_motion,states.sensor.esp8266_01_motion, states.sensor.esp8266_02_motion, states.sensor.esp8266_03_motion] %}
#                    {% for pir in pirs %}
#                      {% if as_timestamp(pir.last_changed) == as_timestamp(pirs | map(attribute='last_changed') | max) %}
#                        {{ pir.name }}
#                      {% endif %}
#                    {% endfor %}

### last_motion_timestamp
### See ESP Packages for all templates

      elw_2_motion_last_triggered:
        friendly_name: "ELW Flur Motion Last Triggered"
        value_template: >-
          {{ as_timestamp(states.sensor.multisensor1_motion.last_changed)|timestamp_custom('%H:%M:%S %d.%m.%Y') }}